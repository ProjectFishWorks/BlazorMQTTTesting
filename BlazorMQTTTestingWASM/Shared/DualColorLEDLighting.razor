@using BlazorMQTTTestingWASM.Models
@using MQTTnet
@inject MQTTnet.ClientLib.MqttService MqttService


<MudCard>
    <MudCardHeader>
        <MudGrid Justify="Justify.Center">
            <h3>Dual Color LED Lighting</h3>
        </MudGrid>
    </MudCardHeader>
    <MudCardContent>
        <MudGrid Spacing="10">
            <MudItem xs="12">
                <MudText Typo="Typo.h6">WHITE LED</MudText>
                <MudSlider @bind-Value="dualColorLEDLighting.WhiteLED" Min=0 Max=255></MudSlider>
            </MudItem>
            <MudItem xs="12">
                <MudText Typo="Typo.h6">BLUE LED</MudText>
                <MudSlider @bind-Value="dualColorLEDLighting.BlueLED" Min=0 Max=255></MudSlider>
            </MudItem>
        </MudGrid>

        <MudGrid Spacing="10">
            <MudItem xs="6">
                <MudText Typo="Typo.h6">Adjust Demo Loop Durations seconds</MudText>
                <MudNumericField @bind-Value="dualColorLEDLighting.DawnTime" Label="Set Dawn Durration" Variant="Variant.Outlined" Min="5" Max="30" />
                <MudNumericField @bind-Value="dualColorLEDLighting.SunriseTime" Label="Set Sunrise Duration" Variant="Variant.Outlined" Min="2" Max="30" />
                <MudNumericField @bind-Value="dualColorLEDLighting.HighNoon" Label="Set High Noon Duration" Variant="Variant.Outlined" Min="2" Max="30" />
                <MudNumericField @bind-Value="dualColorLEDLighting.SunsetTime" Label="Set Sunset Duration" Variant="Variant.Outlined" Min="2" Max="30" />
                <MudNumericField @bind-Value="dualColorLEDLighting.DuskTime" Label="Set Dusk Duration" Variant="Variant.Outlined" Min="5" Max="30" />
                <MudNumericField @bind-Value="dualColorLEDLighting.NightTime" Label="Set Night Duration" Variant="Variant.Outlined" />
                <MudNumericField @bind-Value="dualColorLEDLighting.BlueOnlyMaxIntensity" Label="Set Dusk & Dawn Max Intensity" Variant="Variant.Outlined" Step=".5M" />
            </MudItem>

            <MudItem xs="3">
                    <!--
                    <MudProgressLinear Vertical="true" Color=" MudBlazor.Color.Primary" MudBlazor.Size="Size.Small" Indeterminate="true" />
                    <MudProgressLinear Vertical="true" Color="MudBlazor.Color.Primary" MudBlazor.Size="Size.Medium" Value="195"
                    <MudProgressLinear Vertical="true" Color="MudBlazor.Color.Primary" MudBlazor.Size="Size.Small" Buffer="true" Value="150" BufferValue="10" />
                    <MudProgressLinear Vertical="true" Color="MudBlazor.Color.Dark" Striped="true" MudBlazor.Size="Size.Large" Value="175" />

                     <MudProgressLinear Vertical="true" Color="Color.Primary" Size="Size.Medium" Value="25">
                        <MudText Typo="Typo.subtitle1" Color="Color.Dark"><b>25</b></MudText>
                    </MudProgressLinear>

                    />-->

                <MudText Typo="Typo.subtitle1">Current White Intensity</MudText>
                <MudProgressLinear Vertical="true" Color="MudBlazor.Color.Warning" Rounded="true" MudBlazor.Size="Size.large" Style="height:400px ;width:30px;" Value="@dualColorLEDLighting.CurrentWhiteIntensity" Class="my-1">
                        <MudText Typo="Typo.subtitle1" Color="MudBlazor.Color.Dark"><b>@dualColorLEDLighting.CurrentWhiteIntensity</b></MudText>
                    </MudProgressLinear>

            </MudItem>

            <MudItem xs="3" Class="margin-bottom-50">
                <MudText Typo="Typo.subtitle1">Current Blue Intensity</MudText>
                <MudProgressLinear Vertical="true" Color="MudBlazor.Color.Info" Rounded="true" MudBlazor.Size="Size.large" Style="height:400px ;width:30px;" Value="@dualColorLEDLighting.CurrentBlueIntensity">
                    <MudText Typo="Typo.subtitle1" Color="MudBlazor.Color.Dark"><b>@dualColorLEDLighting.CurrentBlueIntensity</b></MudText>
                </MudProgressLinear>
            </MudItem>

        </MudGrid>
    </MudCardContent>
</MudCard>

@code
{
    [Parameter]
    public int systemID { get; set; } = 0;
    [Parameter]
    public int basestationID { get; set; } = 0;
    [Parameter]
    public int nodeID { get; set; } = 0;

    DualColorLEDLightingDevice dualColorLEDLighting;

    protected override async Task OnInitializedAsync()
    {
        this.dualColorLEDLighting = new DualColorLEDLightingDevice(MqttService, this.systemID, this.basestationID, this.nodeID);
        if (MqttService.IsConnected())
        {
            MqttService.MessageReceived += MqttClient_MessageReceived;
        }
    }

    private void MqttClient_MessageReceived(object sender, MqttApplicationMessageReceivedEventArgs e)
    {
        base.StateHasChanged();
    }
}


