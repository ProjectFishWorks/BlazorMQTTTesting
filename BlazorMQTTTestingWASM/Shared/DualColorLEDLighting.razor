@using BlazorMQTTTestingWASM.Models
@using MQTTnet
@inject MQTTnet.ClientLib.MqttService MqttService



<!--  ......................................Manual adjusment LED override switch and sliders................................  -->

<MudCard Outlined=true>
    <MudCardHeader>
        <MudGrid Justify="Justify.Center">
        </MudGrid>
    </MudCardHeader>
    <MudCardContent>
        <MudCard Outlined=true>
            <MudCardContent>
                <MudSwitch @bind-Value="dualColorLEDLighting.ManualLEDControlOverrideSwitch"
                           Label="Override"
                           Color="MudBlazor.Color.Warning" />
                <MudGrid>
                    <MudItem xs="12">
                        <MudSlider @bind-Value="dualColorLEDLighting.OverrideWhiteIntensity"
                                   Variant="Variant.Filled"
                                   MudBlazor.Size="Size.large"
                                   Min=0 Max=255
                                   Disabled="@(!dualColorLEDLighting.ManualLEDControlOverrideSwitch)">
                            "White LED : @(Math.Round((dualColorLEDLighting.OverrideWhiteIntensity / 255.0M * 100.0M), 1))%"
                        </MudSlider>
                    </MudItem>
                    <MudItem xs="12">
                        <MudSlider @bind-Value="dualColorLEDLighting.OverrideBlueIntensity"
                                   Variant="Variant.Filled"
                                   MudBlazor.Size="Size.large"
                                   Min=0 Max=255
                                   Disabled="@(!dualColorLEDLighting.ManualLEDControlOverrideSwitch)">
                            "Blue LED : @(Math.Round((dualColorLEDLighting.OverrideBlueIntensity / 255.0M * 100.0M), 1))%"
                        </MudSlider>
                    </MudItem>
                </MudGrid>
            </MudCardContent>
        </MudCard>


        <!--  ......................................Adjust Demo Loop Durations seconds................................  -->


        <MudGrid Spacing="10">
            <MudItem xs="6">
                <MudText Typo="Typo.h6">Adjust Demo Loop Durations seconds</MudText>
                <MudNumericField @bind-Value="dualColorLEDLighting.DawnTime" Label="Set Dawn Durration" Variant="Variant.Outlined" Min="5" Max="30" />
                <MudNumericField @bind-Value="dualColorLEDLighting.SunriseTime" Label="Set Sunrise Duration" Variant="Variant.Outlined" Min="2" Max="30" />
                <MudNumericField @bind-Value="dualColorLEDLighting.HighNoon" Label="Set High Noon Duration" Variant="Variant.Outlined" Min="2" Max="30" />
                <MudNumericField @bind-Value="dualColorLEDLighting.SunsetTime" Label="Set Sunset Duration" Variant="Variant.Outlined" Min="2" Max="30" />
                <MudNumericField @bind-Value="dualColorLEDLighting.DuskTime" Label="Set Dusk Duration" Variant="Variant.Outlined" Min="5" Max="30" />
                <MudNumericField @bind-Value="dualColorLEDLighting.NightTime" Label="Set Night Duration" Variant="Variant.Outlined" />
                <MudNumericField @bind-Value="dualColorLEDLighting.BlueOnlyMaxIntensity" Label="Set Dusk & Dawn Max Intensity" Variant="Variant.Outlined" Step=".5M" />
            </MudItem>

            <!--  ......................................Current LED Status Progress bars.........................  -->

            <MudItem xs="3">
                <MudText Justify="Justify.Center" Typo="Typo.subtitle1">Current White Intensity</MudText>
                <MudProgressLinear Vertical="true"
                                   Color="MudBlazor.Color.Warning"
                                   Rounded="true" MudBlazor.Size="Size.large"
                                   Style="height:400px ;width:30px;"
                                   Value="@(dualColorLEDLighting.CurrentWhiteIntensity / 255.0 * 100.0)"
                                   Min="0" Max="100">
                    <MudText Typo="Typo.subtitle1"
                             Color="MudBlazor.Color.Dark"
                             Min="0" Max="100">
                        <b>@(Math.Round((dualColorLEDLighting.CurrentWhiteIntensity / 255M * 100M), 1))</b>
                    </MudText>
                </MudProgressLinear>
            </MudItem>

            <MudItem xs="3" Class="margin-bottom-50">
                <MudText Justify="Justify.Center" Typo="Typo.subtitle1">Current Blue Intensity</MudText>
                <MudProgressLinear Vertical="true"
                                   Color="MudBlazor.Color.Info"
                                   Rounded="true" MudBlazor.Size="Size.large"
                                   Style="height:400px ;width:30px;"
                                   Value="@(dualColorLEDLighting.CurrentBlueIntensity / 255.0 * 100.0)"
                                   Min="0" Max="100">
                    <MudText Typo="Typo.subtitle1"
                             Color="MudBlazor.Color.Dark">
                        <b>@(Math.Round((dualColorLEDLighting.CurrentBlueIntensity / 255M * 100M), 1))</b>
                    </MudText>
                </MudProgressLinear>
            </MudItem>

        </MudGrid>
    </MudCardContent>
</MudCard>

@code
{
    [Parameter]
    public int systemID { get; set; } = 0;
    [Parameter]
    public int basestationID { get; set; } = 0;
    [Parameter]
    public int nodeID { get; set; } = 0;

    DualColorLEDLightingDevice dualColorLEDLighting;

    protected override async Task OnInitializedAsync()
    {
        this.dualColorLEDLighting = new DualColorLEDLightingDevice(MqttService, this.systemID, this.basestationID, this.nodeID);
        if (MqttService.IsConnected())
        {
            MqttService.MessageReceived += MqttClient_MessageReceived;
        }
    }

    private void MqttClient_MessageReceived(object sender, MqttApplicationMessageReceivedEventArgs e)
    {
        base.StateHasChanged();
    }
}


