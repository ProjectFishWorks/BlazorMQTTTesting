@using BlazorMQTTTestingWASM.Models
@using MQTTnet
@inject MQTTnet.ClientLib.MqttService MqttService

<MudCard Outlined>
    <MudCardHeader>
        <MudGrid>
            <MudText Typo="Typo.h6" Align="MudBlazor.Align.Center">Canopy Temerature and Humidity</MudText>
        </MudGrid>
    </MudCardHeader>
    <MudCardContent>
        <MudGrid>
            <MudItem xs="6">
                <MudText Typo="Typo.h6" Align="MudBlazor.Align.Left">Canopy Humidity:    @tempHum.CanopyHum %</MudText>
                <MudText Typo="Typo.h6" Align="MudBlazor.Align.Left">Canopy Temperature: @tempHum.CanopyTemp °</MudText>
            </MudItem>
        </MudGrid>
    </MudCardContent>
</MudCard>


<MudCard Outlined>
    <MudCardHeader>
        <MudGrid Justify="Justify.Center">
            <MudText Typo="Typo.h4" Align="MudBlazor.Align.Center">Tank Temperature</MudText>
        </MudGrid>
    </MudCardHeader>
    <MudCardContent>
        <MudGrid>
            <MudItem xs="6">
                <MudText Typo="Typo.h2" Align="MudBlazor.Align.Center">@tempHum.CanopyHum %</MudText>
                <MudText Typo="Typo.h6" Align="MudBlazor.Align.Left">RTD: @tempHum.CanopyTemp °</MudText>
            </MudItem>
        </MudGrid>
    </MudCardContent>
</MudCard>


<!--
            <MudItem xs="6">
                <MudText Typo="Typo.h2" Align="MudBlazor.Align.Center">@tempHum. %</MudText>
            </MudItem>
        </MudGrid>
        <MudText Typo="Typo.h6" Align="MudBlazor.Align.Left">Pressure: @(tempHum.Pressure) kPa</MudText>
        <MudText Typo="Typo.h5" Align="MudBlazor.Align.Center">Wind</MudText>
        <MudGrid>
            <MudItem xs="4">
                <MudText Typo="Typo.h6" Align="MudBlazor.Align.Left">Speed: @(tempHum.WindSpeedAverage) kph</MudText>
            </MudItem>
            <MudItem xs="4">
                <MudText Typo="Typo.h6" Align="MudBlazor.Align.Left">Guest: @(tempHum.WindSpeedMax) kph</MudText>
            </MudItem>

            <MudItem xs="4">
                <MudText Typo="Typo.h6" Align="MudBlazor.Align.Left">Direction: @(tempHum.WindDirectionMax) °</MudText>
            </MudItem>
        </MudGrid>
        <MudText Typo="Typo.h5" Align="MudBlazor.Align.Center">Rain</MudText>
        <MudGrid>
            <MudItem xs="4">
                <MudText Typo="Typo.h6" Align="MudBlazor.Align.Left">Last 10mins: @(tempHum.RainfallLast10Minutes)mm</MudText>
            </MudItem>
            <MudItem xs="4">
                <MudText Typo="Typo.h6" Align="MudBlazor.Align.Left">Last Hour: @(tempHum.RainfallLastHour)mm</MudText>
            </MudItem>
            <MudItem xs="4">
                <MudText Typo="Typo.h6" Align="MudBlazor.Align.Left">Last 24 Hours: @(tempHum.RainfallLastDay)mm</MudText>
            </MudItem>
        </MudGrid>

        <MudText Typo="Typo.h6" Align="MudBlazor.Align.Left">Last Updated: @tempHum.LastUpdatedTime</MudText>

    </MudCardContent>
</MudCard>
                        -->
@code {
    [Parameter]
    public int systemID { get; set; } = 0;
    [Parameter]
    public int basestationID { get; set; } = 0;
    [Parameter]
    public int nodeID { get; set; } = 0;

    TempHumDevice tempHum;

    private KeyValuePair<int, float?> windDirections;

    protected override async Task OnInitializedAsync()
    {
        this.tempHum = new TempHumDevice(MqttService, this.systemID, this.basestationID, this.nodeID);

        if (MqttService.IsConnected())
        {
            MqttService.MessageReceived += MqttClient_MessageReceived;
        }
    }

    private void MqttClient_MessageReceived(object sender, MqttApplicationMessageReceivedEventArgs e)
    {
        base.StateHasChanged();
    }



                        }
