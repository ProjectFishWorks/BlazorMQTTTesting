@using BlazorMQTTTestingWASM.Models
@using MQTTnet
@inject MQTTnet.ClientLib.MqttService MqttService

<MudCard>
    <MudCardHeader>
        <MudGrid Justify="Justify.Center">
            <h3>TesterHat</h3>
        </MudGrid>
    </MudCardHeader>
    <MudCardContent>
        <MudGrid Spacing="10">
            <MudItem xs="4">
                <MudText Typo="Typo.h6">Potentiometer:</MudText>
            </MudItem>
            <MudItem xs="2">
                @if (testerHat.PotentiometerValue == null)
                {
                    <MudProgressCircular Size="MudBlazor.Size.Medium" Color=" MudBlazor.Color.Primary" Indeterminate="true" />
                }
                else
                {
                    <MudProgressCircular Size="MudBlazor.Size.Medium" Color="MudBlazor.Color.Primary" Value="@testerHat.PotentiometerValue.Value" Min="0" Max="4096" />
                }
            </MudItem>
            <MudFlexBreak />
            <MudItem xs="3">
                <MudSwitch @bind-Value="testerHat.ButtonValues[0]" Color="MudBlazor.Color.Secondary" ReadOnly=" true"></MudSwitch>
                <MudText Typo="Typo.h6">Button 1</MudText>
                <MudSlider @bind-Value="testerHat.LED1" Min=0 Max=255></MudSlider>
                <MudText Typo="Typo.h6">LED 1</MudText>
            </MudItem>
            <MudItem xs="3">
                <MudSwitch @bind-Value="testerHat.ButtonValues[1]" Color="MudBlazor.Color.Secondary" ReadOnly=" true"></MudSwitch>
                <MudText Typo="Typo.h6">Button 2</MudText>
                <MudSlider @bind-Value="testerHat.LED2" Min=0 Max=255></MudSlider>
                <MudText Typo="Typo.h6">LED 2</MudText>
                </MudItem>
            <MudItem xs="3">
                <MudSwitch @bind-Value="testerHat.ButtonValues[2]" Color="MudBlazor.Color.Secondary" ReadOnly=" true"></MudSwitch>
                <MudText Typo="Typo.h6">Button 3</MudText>
                <MudSlider @bind-Value="testerHat.LED3" Min=0 Max=255></MudSlider>
                <MudText Typo="Typo.h6">LED 3</MudText>
             </MudItem>
             <MudItem xs="3">
                <MudSwitch @bind-Value="testerHat.ButtonValues[3]" Color="MudBlazor.Color.Secondary" ReadOnly=" true"></MudSwitch>
                <MudText Typo="Typo.h6">Button 4</MudText>
                <MudSlider @bind-Value="testerHat.LED4" Min=0 Max=255></MudSlider>
                <MudText Typo="Typo.h6">LED 4</MudText>
             </MudItem>
        </MudGrid>
    </MudCardContent>
    <MudCard>
        <MudCardHeader>
            <MudText Typo="Typo.h5">Button History</MudText>
            <MudIconButton @onclick="onRefreshHistory"
                           Icon="@Icons.Material.Filled.Refresh" />
        </MudCardHeader>
        <MudCardContent>
            @if (chartData != null)
            {
                <ApexChart TItem="HistoryChartData"
                Title="Pot History"
                       Options="@options"
                        @ref="chart">
                <ApexPointSeries TItem="HistoryChartData"
                                 Items="chartData"
                                 Name="Value"
                                 SeriesType="SeriesType.Line"
                                 XValue="@(e => e.time)"
                                 YValue="@(e => e.data)"
                                 
                                 OrderBy="e=>e.X" 
                                 />

                </ApexChart>
            }
            else
            {
                <MudText Typo="Typo.h5">History Loading...</MudText>
            }
        </MudCardContent>
    </MudCard>
</MudCard>



@code {
    [Parameter]
    public int systemID { get; set; } = 0;
    [Parameter]
    public int basestationID { get; set; } = 0;
    [Parameter]
    public int nodeID { get; set; } = 0;

    public List<HistoryChartData> chartData = null;

    TesterHatDevice testerHat;

    private ApexChartOptions<HistoryChartData> options;

    private ApexChart<HistoryChartData> chart;

    private async void onRefreshHistory()
    {
        Console.WriteLine("Starting Task...");
        var task = testerHat.PotentiometerHistoryChartData();
        await task;
        task.Wait();
        chartData = task.Result;
        await chart?.UpdateSeriesAsync(true);
        Console.WriteLine("Task completed");
    }

    protected override async Task OnInitializedAsync(){

        if (MqttService.IsConnected())
        {
            MqttService.MessageReceived += MqttClient_MessageReceived;
        }

        Console.WriteLine("Starting Task...");
        var task = testerHat.PotentiometerHistoryChartData();
        await task;
        chartData = task.Result;
        Console.WriteLine("Task completed");
    }

    protected override void OnInitialized()
    {
        this.testerHat = new TesterHatDevice(MqttService, this.systemID, this.basestationID, this.nodeID);
        //chartData = testerHat.PotentiometerHistoryChartData;
        
        options = new ApexChartOptions<HistoryChartData>
        {
            Chart = new Chart
            {
                Type = ApexCharts.ChartType.Line,
                Toolbar = new Toolbar
                {
                    Show = true
                }
            }
        };
        options.Xaxis = new XAxis
        {
            TickAmount = 10,
            Title = new AxisTitle
            {
                OffsetY = 5,
                Text = "Time",
                Style = new AxisTitleStyle { FontSize = "14px", Color = "lightgrey" }
            },
            AxisBorder = new AxisBorder
            {
                Height = 2
            }
        };

    }
    

    private void MqttClient_MessageReceived(object sender, MqttApplicationMessageReceivedEventArgs e)
    {
        base.StateHasChanged();
    }



}
