@using BlazorMQTTTestingWASM.Models
@using MQTTnet
@inject MQTTnet.ClientLib.MqttService MqttService

<MudCard>
    <MudCardHeader>
        <MudGrid Justify="Justify.Center">
            <h3>TesterHat</h3>
        </MudGrid>
    </MudCardHeader>
    <MudCardContent>
        <MudGrid Spacing="10">
            <MudItem xs="4">
                <MudText Typo="Typo.h6">Potentiometer:</MudText>
            </MudItem>
            <MudItem xs="2">
                @if (testerHat.PotentiometerValue == null)
                {
                    <MudProgressCircular Size="MudBlazor.Size.Medium" Color=" MudBlazor.Color.Primary" Indeterminate="true" />
                }
                else
                {
                    <MudProgressCircular Size="MudBlazor.Size.Medium" Color="MudBlazor.Color.Primary" Value="@testerHat.PotentiometerValue.Value" Min="0" Max="4096" />
                }
            </MudItem>
            <MudFlexBreak />
            <MudItem xs="3">
                <MudSwitch @bind-Value="testerHat.ButtonValues[0]" Color="MudBlazor.Color.Secondary" ReadOnly=" true"></MudSwitch>
                <MudText Typo="Typo.h6">Button 1</MudText>
                <MudSlider @bind-Value="testerHat.LED1" Min=0 Max=255></MudSlider>
                <MudText Typo="Typo.h6">LED 1</MudText>
            </MudItem>
            <MudItem xs="3">
                <MudSwitch @bind-Value="testerHat.ButtonValues[1]" Color="MudBlazor.Color.Secondary" ReadOnly=" true"></MudSwitch>
                <MudText Typo="Typo.h6">Button 2</MudText>
                <MudSlider @bind-Value="testerHat.LED2" Min=0 Max=255></MudSlider>
                <MudText Typo="Typo.h6">LED 2</MudText>
                </MudItem>
            <MudItem xs="3">
                <MudSwitch @bind-Value="testerHat.ButtonValues[2]" Color="MudBlazor.Color.Secondary" ReadOnly=" true"></MudSwitch>
                <MudText Typo="Typo.h6">Button 3</MudText>
                <MudSlider @bind-Value="testerHat.LED3" Min=0 Max=255></MudSlider>
                <MudText Typo="Typo.h6">LED 3</MudText>
             </MudItem>
             <MudItem xs="3">
                <MudSwitch @bind-Value="testerHat.ButtonValues[3]" Color="MudBlazor.Color.Secondary" ReadOnly=" true"></MudSwitch>
                <MudText Typo="Typo.h6">Button 4</MudText>
                <MudSlider @bind-Value="testerHat.LED4" Min=0 Max=255></MudSlider>
                <MudText Typo="Typo.h6">LED 4</MudText>
             </MudItem>
        </MudGrid>
    </MudCardContent>
    <MudCard>
        <MudCardHeader>
            <MudText Typo="Typo.h5">Potentiometer History</MudText>
            <MudIconButton @onclick="onRefreshHistory"
                           Icon="@Icons.Material.Filled.Refresh" />
        </MudCardHeader>
        <MudCardContent>
            <MudGrid>
                <MudItem xs="2">
                    <MudNumericField @bind-Value="testerHat.HistoryHours" Label="Hours" Min="1" Max="24" FullWidth="false" />
                </MudItem>
            </MudGrid>

            @if (testerHat.PotentiometerHistory != null)
            {
                <ApexChart TItem="HistoryChartData"
                    Options="@options"
                    XAxisType="XAxisType.Datetime"
                    @ref="chart">
                    <ApexPointSeries TItem="HistoryChartData"
                                     Items="testerHat.PotentiometerHistory"
                                     Name="Value"
                                     SeriesType="SeriesType.Line"
                                     XValue="@(e => e.time)"
                                     YValue="@(e => e.data)"
                                 
                                     OrderBy="e=>e.X" 
                                     />

                    </ApexChart>
            }
            else
            {
                <MudGrid>
                    <MudItem xs="12">
                        <MudText Typo="Typo.h4" Align="MudBlazor.Align.Center">History Loading</MudText>
                        <MudProgressLinear Size="MudBlazor.Size.Medium" Color=" MudBlazor.Color.Primary" Indeterminate="true" />
                    </MudItem>
                </MudGrid>

            }
        </MudCardContent>
    </MudCard>
</MudCard>



@code {
    [Parameter]
    public int systemID { get; set; } = 0;
    [Parameter]
    public int basestationID { get; set; } = 0;
    [Parameter]
    public int nodeID { get; set; } = 0;

    public List<HistoryChartData> chartData = null;

    private ApexChartOptions<HistoryChartData> options;

    private ApexChart<HistoryChartData> chart;

    private int historyHours = 1;

    TesterHatDevice testerHat;

    private void onRefreshHistory()
    {
        testerHat.requestHistoricalData(nodeID, 45056, testerHat.HistoryHours);
    }

    private void onHoursChanged(int value)
    {
        Console.WriteLine("Hours Changed: " + value);
        historyHours = value;
        testerHat.requestHistoricalData(nodeID, 45056, testerHat.HistoryHours);
    }

    protected override async Task OnInitializedAsync(){

        testerHat.requestHistoricalData(nodeID, 45056, testerHat.HistoryHours);
        if (MqttService.IsConnected())
        {
            MqttService.MessageReceived += MqttClient_MessageReceived;
        }
    }

    protected override void OnInitialized()
    {
        this.testerHat = new TesterHatDevice(MqttService, this.systemID, this.basestationID, this.nodeID, this.chart);
        //chartData = testerHat.PotentiometerHistoryChartData;

        options = new ApexChartOptions<HistoryChartData>
        {
            Chart = new Chart
            {
                Type = ApexCharts.ChartType.Line,
                Toolbar = new Toolbar
                {
                    Show = true
                }
            }
        };
        options.Xaxis = new XAxis
        {
            TickAmount = 8,
            Title = new AxisTitle
            {
                Text = "Time",
            },
            Labels = new XAxisLabels
            {
                DatetimeFormatter = new DatetimeFormatter
                {
                    Year = "yyyy",
                    Month = "MMM 'yy",
                    Day = "dd MMM",
                    Hour = "HH:mm"
                }
            }
        };
        options.Yaxis = new List<YAxis>
        {
            new YAxis
            {
                Title = new AxisTitle
                {
                    Text = "Potentiometer Value",
                },
            }
        };
        options.Grid = new Grid
        {
            Show = true,
            Xaxis = new GridXAxis
            {
               Lines = new Lines
               {
                   Show = true
               }
            },
            StrokeDashArray = 4
        };

    }


    private void MqttClient_MessageReceived(object sender, MqttApplicationMessageReceivedEventArgs e)
    {
        base.StateHasChanged();
        if (e.ApplicationMessage.Topic.StartsWith("historyOut"))
        {
            Console.WriteLine("History Data Received");
            chart.UpdateSeriesAsync(true);
        }
    }



}
