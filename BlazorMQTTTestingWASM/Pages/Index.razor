@page "/"
@using System.Net.Http

@using System.Text;
@using MQTTnet.Client.Connecting;
@using MQTTnet.Client.Disconnecting;
@using MQTTnet;
@inject HttpClient Http
@inject MQTTnet.ClientLib.MqttService MqttService

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<SurveyPrompt Title="How is Blazor working for you?" />

<div class="container">
    Welcome to MQTTnet Blazor Web App playground.
    <br /> MQTT client connection status : @MqttService.IsConnected()
    <br /> Messages Receviced : @MqttService.MeassagesReceived
    <br /> Last Message : @MqttService.LastMessageReceived
    
</div>

<div id="ConnectionContainer" class="container">
    <label>Web Socket :</label>
    <input type="text" @bind="mqttWebSocket" class="form-control" aria-label="Default" />
    <button class="btn btn-primary" @onclick="ConnectBtn_Clicked">Connect</button>
</div>

<div id="TopicContainer" class="container">
    <label>Topic:</label>
    <input type="text" @bind="topic" class="form-control" aria-label="Default" placeholder="Topic" />
    <button class="btn btn-success" @onclick="SubscribeBtn_Clicked">Subscribe</button>
    <button class="btn btn-danger" @onclick="UnsubscribeBtn_Clicked">Unsubscribe</button>
</div>

@code{
    private string mqttWebSocket { get; set; } = "broker.hivemq.com:8884/mqtt";

    private string MqttClientConnection { get; set; }

    private string topic { get; set; } = "testtopic/#";

    protected override async Task OnInitializedAsync()
    {
        MqttClientConnection = "Disconnected";
        if(MqttService.IsConnected())
        {
            MqttService.MessageReceived += MqttClient_MessageReceived;
        }
    }

    private async void SubscribeBtn_Clicked()
    {
        await MqttService.Subscribe(topic);
    }

    private async void UnsubscribeBtn_Clicked()
    {
        await MqttService.Unsubscribe(topic);
    }

    private void MqttClient_MessageReceived(object sender, MqttApplicationMessageReceivedEventArgs e)
    {
        base.StateHasChanged();
    }

    private async void ConnectBtn_Clicked()
    {
        var mqttClientOptions = new MQTTnet.Client.Options.MqttClientOptionsBuilder()
            .WithClientId(Guid.NewGuid().ToString())
            .WithWebSocketServer(mqttWebSocket)
            .WithTls()
            .WithCleanSession()
            .Build();

        MqttService.Init(Guid.NewGuid().ToString(), mqttClientOptions);

        MqttService.MessageReceived += MqttClient_MessageReceived;

        var result = await MqttService.Connect();
        MqttClientConnection = result ? "Connected" : "Disconnected";
        base.StateHasChanged();
    }
}


