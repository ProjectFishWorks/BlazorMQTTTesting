@page "/"
@using System.Net.Http

@using BlazorMQTTTestingWASM.Models

@using System.Text;
@using MQTTnet.Client.Connecting;
@using MQTTnet.Client.Disconnecting;
@using MQTTnet;
@inject HttpClient Http
@inject MQTTnet.ClientLib.MqttService MqttService

<PageTitle>Connection</PageTitle>

<h1>Project Fishworks - Prototype App</h1>

<div class="container">
    <br /> MQTT client connection status : @MqttService.IsConnected()
    <br /> Messages Receviced : @MqttService.MeassagesReceived
</div>

<div id="ConnectionContainer" class="container">

    <h3>MQTT Connection</h3>

    <label>Web Socket URL:</label>
    <input type="text" @bind="mqttWebSocket" class="form-control" aria-label="Default" />
    <label>Username :</label>
    <input type="text" @bind="mqttUsername" class="form-control" aria-label="Default" />
    <label>Password :</label>
    <input type="text" @bind="mqttPassword" class="form-control" aria-label="Default" />
    <button class="btn btn-primary" @onclick="ConnectBtn_Clicked">Connect</button>
</div>

<div id="TopicContainer" class="container">
    <label>Topic:</label>
    <input type="text" @bind="topic" class="form-control" aria-label="Default" placeholder="Topic" />
    <button class="btn btn-success" @onclick="SubscribeBtn_Clicked">Subscribe</button>
    <button class="btn btn-danger" @onclick="UnsubscribeBtn_Clicked">Unsubscribe</button>
</div>

<div id="MessageContainer" class="container">
    <h3>Messages</h3>
    <p>Most recent message reacived for each topic</p>
    <table class="table">
        <tbody>
            @foreach (var kpv in MqttService.AllMessages)
            {
                <tr>
                    <td>@kpv.Key</td>
                    <td>@kpv.Value</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code{
    private string mqttWebSocket { get; set; } = "ce739858516845f790a6ae61e13368f9.s1.eu.hivemq.cloud:8884/mqtt";
    private string mqttUsername { get; set; } = "";
    private string mqttPassword { get; set; } = "";

    private string MqttClientConnection { get; set; }

    private string topic { get; set; } = "#";

    protected override async Task OnInitializedAsync()
    {
        MqttClientConnection = "Disconnected";
        if(MqttService.IsConnected())
        {
            MqttService.MessageReceived += MqttClient_MessageReceived;
        }
    }

    private async void SubscribeBtn_Clicked()
    {
        await MqttService.Subscribe(topic);
    }

    private async void UnsubscribeBtn_Clicked()
    {
        await MqttService.Unsubscribe(topic);
    }

    private void MqttClient_MessageReceived(object sender, MqttApplicationMessageReceivedEventArgs e)
    {
        base.StateHasChanged();
    }

    private async void ConnectBtn_Clicked()
    {
        var mqttClientOptions = new MQTTnet.Client.Options.MqttClientOptionsBuilder()
            .WithClientId(Guid.NewGuid().ToString())
            .WithCredentials(mqttUsername, mqttPassword)
            .WithWebSocketServer(mqttWebSocket)
            .WithTls()
            .WithCleanSession()
            .Build();

        MqttService.Init(Guid.NewGuid().ToString(), mqttClientOptions);

        MqttService.MessageReceived += MqttClient_MessageReceived;

        var result = await MqttService.Connect();
        MqttClientConnection = result ? "Connected" : "Disconnected";
        base.StateHasChanged();
    }
}


